{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * on-headers\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Reference to Array slice.\n */\n\nvar slice = Array.prototype.slice\n\n/**\n * Execute a listener when a response is about to write headers.\n *\n * @param {Object} res\n * @return {Function} listener\n * @api public\n */\n\nmodule.exports = function onHeaders(res, listener) {\n  if (!res) {\n    throw new TypeError('argument res is required')\n  }\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('argument listener must be a function')\n  }\n\n  res.writeHead = createWriteHead(res.writeHead, listener)\n}\n\nfunction createWriteHead(prevWriteHead, listener) {\n  var fired = false;\n\n  // return function with core name and argument list\n  return function writeHead(statusCode) {\n    // set headers from arguments\n    var args = setWriteHeadHeaders.apply(this, arguments);\n\n    // fire listener\n    if (!fired) {\n      fired = true\n      listener.call(this)\n\n      // pass-along an updated status code\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\n        args[0] = this.statusCode\n        args.length = 1\n      }\n    }\n\n    prevWriteHead.apply(this, args);\n  }\n}\n\nfunction setWriteHeadHeaders(statusCode) {\n  var length = arguments.length\n  var headerIndex = length > 1 && typeof arguments[1] === 'string'\n    ? 2\n    : 1\n\n  var headers = length >= headerIndex + 1\n    ? arguments[headerIndex]\n    : undefined\n\n  this.statusCode = statusCode\n\n  // the following block is from node.js core\n  if (Array.isArray(headers)) {\n    // handle array case\n    for (var i = 0, len = headers.length; i < len; ++i) {\n      this.setHeader(headers[i][0], headers[i][1])\n    }\n  } else if (headers) {\n    // handle object case\n    var keys = Object.keys(headers)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      if (k) this.setHeader(k, headers[k])\n    }\n  }\n\n  // copy leading arguments\n  var args = new Array(Math.min(length, headerIndex))\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i]\n  }\n\n  return args\n}\n"]}