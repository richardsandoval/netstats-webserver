{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;AAQA,YAAY,CAAA;;;;;;;AAOZ,MAAM,CAAC,OAAO,GAAG,IAAI,CAAA;;;;;;;;;;;AAWrB,IAAI,iBAAiB,GAAG,4DAA4D,CAAA;;;;;;;;;;;AAWpF,IAAI,cAAc,GAAG,gBAAgB,CAAA;;;;;;;;;;AAUrC,SAAS,IAAI,CAAC,GAAG,EAAE;AACjB,MAAI,CAAC,GAAG,EAAE;AACR,UAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;GAChD;;;AAGD,MAAI,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAA,CAAE,OAAO,CAAC,aAAa,CAAA;;;AAGnD,MAAI,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAA;;AAEhD,MAAI,CAAC,KAAK,EAAE;AACV,WAAM;GACP;;;AAGD,MAAI,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAE1D,MAAI,CAAC,QAAQ,EAAE;AACb,WAAM;GACP;;;AAGD,SAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;CACjD;;;;;;;AAOD,SAAS,YAAY,CAAC,GAAG,EAAE;AACzB,SAAO,IAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAA;CAC5C;;;;;;;AAOD,SAAS,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE;AAC/B,MAAI,CAAC,IAAI,GAAG,IAAI,CAAA;AAChB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAA;CACjB","file":"index-compiled.js","sourcesContent":["/*!\n * basic-auth\n * Copyright(c) 2013 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = auth\n\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\n\nvar credentialsRegExp = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9\\-\\._~\\+\\/]+=*) *$/\n\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar userPassRegExp = /^([^:]*):(.*)$/\n\n/**\n * Parse the Authorization header field of a request.\n *\n * @param {object} req\n * @return {object} with .name and .pass\n * @public\n */\n\nfunction auth(req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  // get header\n  var header = (req.req || req).headers.authorization\n\n  // parse header\n  var match = credentialsRegExp.exec(header || '')\n\n  if (!match) {\n    return\n  }\n\n  // decode user pass\n  var userPass = userPassRegExp.exec(decodeBase64(match[1]))\n\n  if (!userPass) {\n    return\n  }\n\n  // return credentials object\n  return new Credentials(userPass[1], userPass[2])\n}\n\n/**\n * Decode base64 string.\n * @private\n */\n\nfunction decodeBase64(str) {\n  return new Buffer(str, 'base64').toString()\n}\n\n/**\n * Object to represent user credentials.\n * @private\n */\n\nfunction Credentials(name, pass) {\n  this.name = name\n  this.pass = pass\n}\n"]}